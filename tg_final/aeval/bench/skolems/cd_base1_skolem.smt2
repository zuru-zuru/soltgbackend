(declare-fun $Property~0.cpt$2 () Int)
(declare-fun $Property~0.acceptable$2 () Bool)
(declare-fun $Property~0.speed$2 () Int)
(declare-fun $speed$2 () Int)
(declare-fun $Sofar~0.X$2 () Bool)
(declare-fun $minus$2 () Bool)
(declare-fun $Environment~0.minus$2 () Bool)
(declare-fun $diff$0 () Int)
(declare-fun $plus$2 () Bool)
(declare-fun $Environment~0.plus$2 () Bool)
(declare-fun $Environment~0.diff$2 () Int)
(declare-fun $Property~0.ok$2 () Bool)
(declare-fun $Sofar~0.Sofar$2 () Bool)
(declare-fun $OK$2 () Bool)
(declare-fun $realistic$2 () Bool)
(declare-fun $Environment~0.ok$2 () Bool)

(assert (let ((a!1 (and true (>= $diff$0 1) (<= $diff$0 4) (<= (- 0 4) $diff$0))))
(let ((a!2 (and (= $realistic$2 a!1)
                (= $Environment~0.ok$2 a!1)
                (= $OK$2 true)
                (= $Sofar~0.Sofar$2 (and (< 8 16) a!1 (<= 0 8)))
                (= $Property~0.ok$2 true)
                (= $Environment~0.diff$2 $diff$0)
                (= $Environment~0.plus$2 false)
                (= $plus$2 false)
                (= $Environment~0.minus$2 false)
                (= $minus$2 false)
                (= $Sofar~0.X$2 (and (< 8 16) a!1 (<= 0 8)))
                (= $speed$2 8)
                (= $Property~0.speed$2 8)
                (= $Property~0.acceptable$2 true)
                (= $Property~0.cpt$2 0))))
(let ((a!3 (ite (or (not (<= (- 4) $diff$0))
                    (not (<= $diff$0 4))
                    (not (>= $diff$0 1)))
                a!2
                true)))
  (ite (and (<= (- 4) $diff$0) (<= $diff$0 4) (>= $diff$0 1)) a!2 a!3)))))
(check-sat)
