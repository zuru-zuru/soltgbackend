(declare-fun %init () Bool)
(declare-fun $init_invalid_s$0 () Int)
(declare-fun $OK$2 () Bool)
(declare-fun $V84_X$2 () Bool)
(declare-fun $e_s3$0 () Bool)
(declare-fun $V28_valid_s$2 () Int)
(declare-fun $V29_dirty_s$2 () Int)
(declare-fun $V31_env$2 () Bool)
(declare-fun $V31_env$~1 () Bool)
(declare-fun $e_s2$0 () Bool)
(declare-fun $e_s1$0 () Bool)

(assert (let ((a!1 (and (not (and $e_s1$0 $e_s2$0 $e_s1$0 $e_s3$0 $e_s2$0 $e_s3$0))
                (>= $init_invalid_s$0 0))))
(let ((a!2 (or (< 0 1) (not (ite %init a!1 (and a!1 $V31_env$~1))) (< 0 1))))
(let ((a!3 (and (= $OK$2 a!2)
                (= $V31_env$2 (ite %init a!1 (and a!1 $V31_env$~1)))
                (= $V29_dirty_s$2 0)
                (= $V28_valid_s$2 0)
                (= $V84_X$2 a!1))))
(let ((a!4 (ite (and (or (not $e_s1$0) (not $e_s2$0) (not $e_s3$0))
                     (>= $init_invalid_s$0 0))
                a!3
                true)))
  (ite (or (and $e_s1$0 $e_s2$0 $e_s3$0) (not (>= $init_invalid_s$0 0)))
       a!3
       a!4))))))
(check-sat)
